{"version":3,"sources":["assets/eu.png","assets/supermario.gif","assets/estrelamario.gif","assets/zelda-link.gif","assets/kakashi.gif","assets/kirito.gif","assets/minato.gif","assets/sonic.gif","assets/yang.gif","Pages/App/App.js","serviceWorker.js","index.js","routes.js"],"names":["module","exports","App","document","addEventListener","e","this","querySelectorAll","forEach","layer","speed","getAttribute","x","window","innerWidth","pageX","y","innerHeight","pageY","style","transform","className","src","eu","data-speed","alt","href","target","rel","id","mario","estrelamario","yang","zeldalink","kirito","sonic","minato","kakashi","Boolean","location","hostname","match","ReactDOM","render","path","exact","component","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,+UC4D5BC,MA/Cf,WAYE,OAXAC,SAASC,iBAAiB,YAC1B,SAAkBC,GACdC,KAAKC,iBAAiB,UAAUC,QAAQ,SAAAC,GACpC,IAAMC,EAAQD,EAAME,aAAa,cAE3BC,GAAKC,OAAOC,WAAaT,EAAEU,MAAML,GAAO,IACxCM,GAAKH,OAAOI,YAAcZ,EAAEa,MAAMR,GAAO,IAE/CD,EAAMU,MAAMC,UAAZ,qBAAsCR,EAAtC,0BAAyDI,EAAzD,WAIN,yBAAKK,UAAU,OACX,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAIF,UAAU,iBAAiBG,cAAa,EAAGC,IAAI,SAC7D,yBAAKJ,UAAU,QAAQG,cAAa,GAClC,uEAC2C,6BAD3C,gEAEyD,6BAFzD,iCAGgC,8BAEhC,uBACEH,UAAU,WACVK,KAAK,0BACLC,OAAO,SACPC,IAAI,uBAJN,UAWJ,yBAAKP,UAAU,YACb,yBAAKA,UAAU,QAAQQ,GAAG,QAAQL,aAAY,EAAGF,IAAKQ,IAAOL,IAAI,UACjE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,aAAY,EAAGF,IAAKS,IAAcN,IAAI,kBACxE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,cAAa,EAAGF,IAAKU,IAAMP,IAAI,eACjE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,cAAa,EAAGF,IAAKW,IAAWR,IAAI,eACtE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,aAAY,EAAGF,IAAKY,IAAQT,IAAI,WAClE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,cAAa,EAAGF,IAAKa,IAAOV,IAAI,UAClE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,cAAa,EAAGF,IAAKc,IAAQX,IAAI,WACnE,yBAAKJ,UAAU,QAAQQ,GAAG,QAAQL,aAAY,EAAGF,IAAKe,IAASZ,IAAI,eC1CzDa,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCDD,WACX,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW5C,MDF7B,MAAYC,SAAS4C,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.199ac868.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eu.0db44a80.png\";","module.exports = __webpack_public_path__ + \"static/media/supermario.ef03498a.gif\";","module.exports = __webpack_public_path__ + \"static/media/estrelamario.e4960c1d.gif\";","module.exports = __webpack_public_path__ + \"static/media/zelda-link.ac0fcf64.gif\";","module.exports = __webpack_public_path__ + \"static/media/kakashi.30f25dae.gif\";","module.exports = __webpack_public_path__ + \"static/media/kirito.f835ca30.gif\";","module.exports = __webpack_public_path__ + \"static/media/minato.b4701a17.gif\";","module.exports = __webpack_public_path__ + \"static/media/sonic.2148c060.gif\";","module.exports = __webpack_public_path__ + \"static/media/yang.faf226d9.gif\";","import React from 'react';\n\nimport eu from '../../assets/eu.png';\nimport mario from '../../assets/supermario.gif';\nimport estrelamario from '../../assets/estrelamario.gif';\nimport zeldalink from '../../assets/zelda-link.gif';\nimport kakashi from '../../assets/kakashi.gif';\nimport kirito from '../../assets/kirito.gif';\nimport minato from '../../assets/minato.gif';\nimport sonic from '../../assets/sonic.gif';\nimport yang from '../../assets/yang.gif';\nimport './App.css';\n\nfunction App() {\n  document.addEventListener(\"mousemove\", parallax);\n  function parallax(e) {\n      this.querySelectorAll('.layer').forEach(layer => {\n          const speed = layer.getAttribute('data-speed')\n  \n          const x = (window.innerWidth - e.pageX*speed)/100\n          const y = (window.innerHeight - e.pageY*speed)/100\n  \n          layer.style.transform = `translateX(${x}px) translateY(${y}px)`\n      })\n  }\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={eu} className=\"App-logo layer\" data-speed={-1} alt=\"logo\" />\n          <div className=\"layer\" data-speed={-2}>\n            <p>\n              Estudante de Eng. de Software, amante da <br />\n              tecnologia e programação, com o foco nos jogos digitas <br />\n              (Acho que deu pra perceber ;P)<br />\n            </p>\n            <a\n              className=\"App-link\"\n              href=\"https://github.com/JvSe\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              JvSe\n            </a>\n          </div>\n          \n        </header>\n        <div className=\"elements\">\n          <img className=\"layer\" id=\"img-1\" data-speed={5} src={mario} alt=\"mario\"/>\n          <img className=\"layer\" id=\"img-2\" data-speed={5} src={estrelamario} alt=\"estrela mario\"/>  \n          <img className=\"layer\" id=\"img-3\" data-speed={-3} src={yang} alt=\"dragonball\"/>  \n          <img className=\"layer\" id=\"img-4\" data-speed={-2} src={zeldalink} alt=\"zelda link\"/>  \n          <img className=\"layer\" id=\"img-5\" data-speed={7} src={kirito} alt=\"kirito\"/>  \n          <img className=\"layer\" id=\"img-6\" data-speed={-3} src={sonic} alt=\"sonic\"/>  \n          <img className=\"layer\" id=\"img-7\" data-speed={-6} src={minato} alt=\"minato\"/>  \n          <img className=\"layer\" id=\"img-8\" data-speed={4} src={kakashi} alt=\"kakashi\"/>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\r\nimport { BrowserRouter, Route } from 'react-router-dom';\r\n\r\nimport App from './Pages/App/App';\r\n\r\nexport default function Routes() {\r\n    return(\r\n        <BrowserRouter>\r\n            <Route path=\"/\" exact component={App}></Route>\r\n        </BrowserRouter>\r\n    );\r\n}"],"sourceRoot":""}